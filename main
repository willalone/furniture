import sys
import pymysql
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMainWindow, QMessageBox, QTableWidgetItem

# Параметры подключения к базе данных MySQL
db_config = {
    "host": "localhost",
    "user": "admin",
    "password": "admin_228",
    "database": "bd_suprun"
}

class LoginWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Вход в систему")
        self.resize(300, 120)

        self.username_field = QtWidgets.QLineEdit(self)
        self.username_field.setPlaceholderText("Имя пользователя")
        
        self.password_field = QtWidgets.QLineEdit(self)
        self.password_field.setPlaceholderText("Пароль")
        self.password_field.setEchoMode(QtWidgets.QLineEdit.Password)

        self.login_button = QtWidgets.QPushButton("Войти", self)
        self.login_button.clicked.connect(self.handle_login)

        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(self.username_field)
        layout.addWidget(self.password_field)
        layout.addWidget(self.login_button)

    def handle_login(self):
        username = self.username_field.text()
        password = self.password_field.text()

        connection = pymysql.connect(**db_config)
        cursor = connection.cursor()
        cursor.execute("SELECT role FROM users WHERE username=%s AND password=%s", (username, password))
        result = cursor.fetchone()
        connection.close()

        if result:
            role = result[0]
            self.main_window = MainWindow(role)
            self.main_window.show()
            self.close()
        else:
            QMessageBox.warning(self, "Ошибка", "Неверные данные для входа")

class MainWindow(QMainWindow):
    def __init__(self, role):
        super().__init__()
        self.role = role
        self.setWindowTitle("Система учета мебели")
        self.resize(800, 600)

        self.table = QtWidgets.QTableWidget(self)
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(["ID", "Название", "Категория", "Тип", "Количество", "Цена"])

        self.add_button = QtWidgets.QPushButton("Добавить мебель")
        self.add_button.clicked.connect(self.add_furniture)
        
        self.edit_button = QtWidgets.QPushButton("Редактировать мебель")
        self.edit_button.clicked.connect(self.edit_furniture)
        
        self.delete_button = QtWidgets.QPushButton("Удалить мебель")
        self.delete_button.clicked.connect(self.delete_furniture)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.table)
        if self.role == "manager":
            layout.addWidget(self.add_button)
            layout.addWidget(self.edit_button)
            layout.addWidget(self.delete_button)

        container = QtWidgets.QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.load_furniture_data()

    def load_furniture_data(self):
        connection = pymysql.connect(**db_config)
        cursor = connection.cursor()
        cursor.execute("""
            SELECT f.furniture_id, f.name, c.category_name, t.type_name, f.quantity, f.price
            FROM furniture f
            JOIN categories c ON f.category_id = c.category_id
            JOIN furniture_types ft ON f.furniture_id = ft.furniture_id
            JOIN types t ON ft.type_id = t.type_id
        """)
        rows = cursor.fetchall()
        connection.close()

        self.table.setRowCount(0)
        for row in rows:
            row_position = self.table.rowCount()
            self.table.insertRow(row_position)
            for column, data in enumerate(row):
                self.table.setItem(row_position, column, QTableWidgetItem(str(data)))

    def add_furniture(self):
        if self.role != "manager":
            QMessageBox.warning(self, "Ошибка", "Только менеджер может добавлять мебель")
            return

        name, ok_name = QtWidgets.QInputDialog.getText(self, "Добавить мебель", "Название:")
        category, ok_category = QtWidgets.QInputDialog.getText(self, "Добавить мебель", "Категория:")
        type_, ok_type = QtWidgets.QInputDialog.getText(self, "Добавить мебель", "Тип:")
        quantity, ok_quantity = QtWidgets.QInputDialog.getInt(self, "Добавить мебель", "Количество:")
        price, ok_price = QtWidgets.QInputDialog.getDouble(self, "Добавить мебель", "Цена:")

        if ok_name and ok_category and ok_type and ok_quantity and ok_price:
            connection = pymysql.connect(**db_config)
            cursor = connection.cursor()
            cursor.execute("INSERT IGNORE INTO categories (category_name) VALUES (%s)", (category,))
            cursor.execute("INSERT IGNORE INTO types (type_name) VALUES (%s)", (type_,))

            cursor.execute("SELECT category_id FROM categories WHERE category_name = %s", (category,))
            category_id = cursor.fetchone()[0]
            cursor.execute("SELECT type_id FROM types WHERE type_name = %s", (type_,))
            type_id = cursor.fetchone()[0]

            cursor.execute("INSERT INTO furniture (name, quantity, price, category_id) VALUES (%s, %s, %s, %s)", 
                           (name, quantity, price, category_id))
            furniture_id = cursor.lastrowid
            cursor.execute("INSERT INTO furniture_types (furniture_id, type_id) VALUES (%s, %s)", 
                           (furniture_id, type_id))
            connection.commit()
            connection.close()
            self.load_furniture_data()

    def edit_furniture(self):
        if self.role != "manager":
            QMessageBox.warning(self, "Ошибка", "Только менеджер может редактировать мебель")
            return

        row = self.table.currentRow()
        if row == -1:
            QMessageBox.warning(self, "Ошибка", "Выберите мебель для редактирования")
            return

        furniture_id = int(self.table.item(row, 0).text())
        name, ok_name = QtWidgets.QInputDialog.getText(self, "Редактировать мебель", "Название:")
        category, ok_category = QtWidgets.QInputDialog.getText(self, "Редактировать мебель", "Категория:")
        type_, ok_type = QtWidgets.QInputDialog.getText(self, "Редактировать мебель", "Тип:")
        quantity, ok_quantity = QtWidgets.QInputDialog.getInt(self, "Редактировать мебель", "Количество:")
        price, ok_price = QtWidgets.QInputDialog.getDouble(self, "Редактировать мебель", "Цена:")

        if ok_name and ok_category and ok_type and ok_quantity and ok_price:
            connection = pymysql.connect(**db_config)
            cursor = connection.cursor()
            cursor.execute("UPDATE furniture SET name=%s, quantity=%s, price=%s WHERE furniture_id=%s", 
                           (name, quantity, price, furniture_id))
            connection.commit()
            connection.close()
            self.load_furniture_data()

    def delete_furniture(self):
        if self.role != "manager":
            QMessageBox.warning(self, "Ошибка", "Только менеджер может удалять мебель")
            return

        row = self.table.currentRow()
        if row == -1:
            QMessageBox.warning(self, "Ошибка", "Выберите мебель для удаления")
            return

        furniture_id = int(self.table.item(row, 0).text())
        connection = pymysql.connect(**db_config)
        cursor = connection.cursor()
        cursor.execute("DELETE FROM furniture WHERE furniture_id=%s", (furniture_id,))
        connection.commit()
        connection.close()
        self.load_furniture_data()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    login_window = LoginWindow()
    login_window.show()
    sys.exit(app.exec_())
