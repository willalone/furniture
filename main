from email import charset
import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton, 
               QVBoxLayout, QHBoxLayout, QGridLayout, QComboBox, QTableWidget, 
            QTableWidgetItem, QMessageBox, QDialog, QTabWidget)
from PyQt5.QtCore import Qt

import mysql.connector

class DatabaseManager:
    def __init__(self, host, user, password, database, charset='utf8mb4'):
        self.conn = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database,
        charset="utf8mb4",
        collation="utf8mb4_unicode_ci" 
        )
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
    # Таблица мебели
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS Furniture (
            furniture_id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            category VARCHAR(255) NOT NULL,
            price DECIMAL(10,2) NOT NULL,
            stock INT NOT NULL,
            description TEXT
        )
        """)

        # Таблица клиентов
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS Customers (
            customer_id INT AUTO_INCREMENT PRIMARY KEY,
            first_name VARCHAR(255) NOT NULL,
            last_name VARCHAR(255) NOT NULL,
            phone VARCHAR(20),
            email VARCHAR(255)
        )
        """)

        # Таблица заказов
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS Orders (
            order_id INT AUTO_INCREMENT PRIMARY KEY,
            customer_id INT NOT NULL,
            order_date DATE DEFAULT CURRENT_DATE,
            total_amount DECIMAL(10,2) NOT NULL,
            status VARCHAR(255) DEFAULT 'В обработке',
            FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
        )
        """)

        # Таблица деталей заказа
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS OrderDetails (
            id INT AUTO_INCREMENT PRIMARY KEY,
            order_id INT NOT NULL,
            furniture_id INT NOT NULL,
            quantity INT NOT NULL,
            FOREIGN KEY (order_id) REFERENCES Orders(order_id),
            FOREIGN KEY (furniture_id) REFERENCES Furniture(furniture_id)
        )
        """)
        self.cursor.execute("SELECT * FROM Furniture", charset='utf8mb4')

        self.conn.commit()

    # Методы для работы с Furniture
    def add_furniture(self, name, category, price, stock, description):
        sql = "INSERT INTO Furniture (name, category, price, stock, description) VALUES (%s, %s, %s, %s, %s)"
        val = (name, category, price, stock, description)
        self.cursor.execute(sql, val)
        self.conn.commit()

    def get_furniture_items(self):
        self.cursor.execute("SELECT * FROM Furniture")
        return self.cursor.fetchall()

    def update_furniture(self, furniture_id, name, category, price, stock, description):
        sql = "UPDATE Furniture SET name = %s, category = %s, price = %s, stock = %s, description = %s WHERE furniture_id = %s"
        val = (name, category, price, stock, description, furniture_id)
        self.cursor.execute(sql, val)
        self.conn.commit()

    def delete_furniture(self, furniture_id):
        sql = "DELETE FROM Furniture WHERE furniture_id = %s"
        self.cursor.execute(sql, (furniture_id,))
        self.conn.commit()

    # Методы для работы с Customers
    def add_customer(self, first_name, last_name, phone, email):
        sql = "INSERT INTO Customers (first_name, last_name, phone, email) VALUES (%s, %s, %s, %s)"
        val = (first_name, last_name, phone, email)
        self.cursor.execute(sql, val)
        self.conn.commit()

    def get_customers(self):
        self.cursor.execute("SELECT * FROM Customers")
        return self.cursor.fetchall()

    def update_customer(self, customer_id, first_name, last_name, phone, email):
        sql = "UPDATE Customers SET first_name = %s, last_name = %s, phone = %s, email = %s WHERE customer_id = %s"
        val = (first_name, last_name, phone, email, customer_id)
        self.cursor.execute(sql, val)
        self.conn.commit()

    def delete_customer(self, customer_id):
        sql = "DELETE FROM Customers WHERE customer_id = %s"
        self.cursor.execute(sql, (customer_id,))
        self.conn.commit()

    # Методы для работы с Orders
    def add_order(self, customer_id, total_amount):
        sql = "INSERT INTO Orders (customer_id, total_amount) VALUES (%s, %s)"
        val = (customer_id, total_amount)
        self.cursor.execute(sql, val)
        order_id = self.cursor.lastrowid
        self.conn.commit()
        return order_id

    def get_orders(self):
        self.cursor.execute("SELECT * FROM Orders")
        return self.cursor.fetchall()

    def update_order(self, order_id, customer_id, total_amount, status):
        sql = "UPDATE Orders SET customer_id = %s, total_amount = %s, status = %s WHERE order_id = %s"
        val = (customer_id, total_amount, status, order_id)
        self.cursor.execute(sql, val)
        self.conn.commit()

    def delete_order(self, order_id):
        sql = "DELETE FROM Orders WHERE order_id = %s"
        self.cursor.execute(sql, (order_id,))
        self.conn.commit()

    # Методы для работы с OrderDetails
    def add_order_details(self, order_id, furniture_id, quantity):
        sql = "INSERT INTO OrderDetails (order_id, furniture_id, quantity) VALUES (%s, %s, %s)"
        val = (order_id, furniture_id, quantity)
        self.cursor.execute(sql, val)
        self.conn.commit()

    def get_order_details(self, order_id):
        sql = "SELECT * FROM OrderDetails WHERE order_id = %s"
        self.cursor.execute(sql, (order_id,))
        return self.cursor.fetchall()

    def update_order_details(self, order_details_id, order_id, furniture_id, quantity):
        sql = "UPDATE OrderDetails SET order_id = %s, furniture_id = %s, quantity = %s WHERE id = %s"
        val = (order_id, furniture_id, quantity, order_details_id)
        self.cursor.execute(sql, val)
        self.conn.commit()

    def delete_order_details(self, order_details_id):
        sql = "DELETE FROM OrderDetails WHERE id = %s"
        self.cursor.execute(sql, (order_details_id,))
        self.conn.commit()

    def close_connection(self):
        self.conn.close()

class FurnitureTab(QWidget):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.layout = QVBoxLayout(self)

        # Создаем виджеты
        self.furniture_name_label = QLabel("Название:", self)
        self.furniture_name_input = QLineEdit(self)
        self.category_label = QLabel("Категория:", self)
        self.category_combobox = QComboBox(self)
        self.category_combobox.addItems(["Диваны", "Кровати", "Столы", "Стулья", "Шкафы", "Кресла", "Комоды"])
        self.price_label = QLabel("Цена:", self)
        self.price_input = QLineEdit(self)
        self.stock_label = QLabel("На складе:", self)
        self.stock_input = QLineEdit(self)
        self.description_label = QLabel("Описание:", self)
        self.description_input = QLineEdit(self)
        self.add_furniture_button = QPushButton("Добавить мебель", self)
        self.add_furniture_button.clicked.connect(self.add_furniture_item)

        # Таблица мебели
        self.furniture_table = QTableWidget(self)
        self.furniture_table.setColumnCount(6)
        self.furniture_table.setHorizontalHeaderLabels(["ID", "Название", "Категория", "Цена", "На складе", "Описание"])
        self.update_furniture_table()

        # Кнопки для управления мебелью
        self.edit_furniture_button = QPushButton("Редактировать мебель", self)
        self.edit_furniture_button.clicked.connect(self.show_edit_furniture_dialog)
        self.delete_furniture_button = QPushButton("Удалить мебель", self)
        self.delete_furniture_button.clicked.connect(self.delete_furniture_item)

        # Создаем макеты
        input_layout = QGridLayout()
        input_layout.addWidget(self.furniture_name_label, 0, 0)
        input_layout.addWidget(self.furniture_name_input, 0, 1)
        input_layout.addWidget(self.category_label, 1, 0)
        input_layout.addWidget(self.category_combobox, 1, 1)
        input_layout.addWidget(self.price_label, 2, 0)
        input_layout.addWidget(self.price_input, 2, 1)
        input_layout.addWidget(self.stock_label, 3, 0)
        input_layout.addWidget(self.stock_input, 3, 1)
        input_layout.addWidget(self.description_label, 4, 0)
        input_layout.addWidget(self.description_input, 4, 1)
        input_layout.addWidget(self.add_furniture_button, 5, 1)
        self.layout.addLayout(input_layout)

        self.layout.addWidget(self.furniture_table)
        self.layout.addWidget(self.edit_furniture_button)
        self.layout.addWidget(self.delete_furniture_button)

        self.setLayout(self.layout)

    def add_furniture_item(self):
        name = self.furniture_name_input.text()
        category = self.category_combobox.currentText()
        price = self.price_input.text()
        stock = self.stock_input.text()
        description = self.description_input.text()
        self.db_manager.add_furniture(name, category, price, stock, description)
        self.update_furniture_table()
        self.furniture_name_input.clear()
        self.category_combobox.setCurrentIndex(0)
        self.price_input.clear()
        self.stock_input.clear()
        self.description_input.clear()

    def update_furniture_table(self):
        self.furniture_table.setRowCount(0)
        furniture_items = self.db_manager.get_furniture_items()
        for row_number, furniture_item in enumerate(furniture_items):
            self.furniture_table.insertRow(row_number)
            self.furniture_table.setItem(row_number, 0, QTableWidgetItem(str(furniture_item[0])))
            self.furniture_table.setItem(row_number, 1, QTableWidgetItem(furniture_item[1]))
            self.furniture_table.setItem(row_number, 2, QTableWidgetItem(furniture_item[2]))
            self.furniture_table.setItem(row_number, 3, QTableWidgetItem(str(furniture_item[3])))
            self.furniture_table.setItem(row_number, 4, QTableWidgetItem(str(furniture_item[4])))
            self.furniture_table.setItem(row_number, 5, QTableWidgetItem(furniture_item[5]))

    def show_edit_furniture_dialog(self):
        selected_row = self.furniture_table.currentRow()
        if selected_row >= 0:
            furniture_id = int(self.furniture_table.item(selected_row, 0).text())
            dialog = EditFurnitureDialog(self.db_manager, furniture_id)
            if dialog.exec_():
                self.update_furniture_table()

    def delete_furniture_item(self):
        selected_row = self.furniture_table.currentRow()
        if selected_row >= 0:
            furniture_id = int(self.furniture_table.item(selected_row, 0).text())
            self.db_manager.delete_furniture(furniture_id)
            self.update_furniture_table()
        else:
            QMessageBox.warning(self, "Ошибка", "Выберите мебель для удаления.")

class EditFurnitureDialog(QDialog):
    def __init__(self, db_manager, furniture_id=None, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.furniture_id = furniture_id
        self.setWindowTitle("Редактировать мебель")
        self.layout = QGridLayout(self)

        self.furniture_name_input = QLineEdit(self)
        self.category_combobox = QComboBox(self)
        self.category_combobox.addItems(["Диваны", "Кровати", "Столы", "Стулья", "Шкафы", "Кресла", "Комоды"])
        self.price_input = QLineEdit(self)
        self.stock_input = QLineEdit(self)
        self.description_input = QLineEdit(self)
        self.save_button = QPushButton("Сохранить", self)
        self.save_button.clicked.connect(self.save_changes)

        if furniture_id is not None:
            furniture_data = self.db_manager.get_furniture_by_id(furniture_id)
            if furniture_data:
                self.furniture_name_input.setText(furniture_data[1])
                self.category_combobox.setCurrentText(furniture_data[2])
                self.price_input.setText(str(furniture_data[3]))
                self.stock_input.setText(str(furniture_data[4]))
                self.description_input.setText(furniture_data[5])

        # Создаем макеты
        self.layout.addWidget(QLabel("Название:", self), 0, 0)
        self.layout.addWidget(self.furniture_name_input, 0, 1)
        self.layout.addWidget(QLabel("Категория:", self), 1, 0)
        self.layout.addWidget(self.category_combobox, 1, 1)
        self.layout.addWidget(QLabel("Цена:", self), 2, 0)
        self.layout.addWidget(self.price_input, 2, 1)
        self.layout.addWidget(QLabel("На складе:", self), 3, 0)
        self.layout.addWidget(self.stock_input, 3, 1)
        self.layout.addWidget(QLabel("Описание:", self), 4, 0)
        self.layout.addWidget(self.description_input, 4, 1)
        self.layout.addWidget(self.save_button, 5, 1)

        self.setLayout(self.layout)

    def save_changes(self):
        name = self.furniture_name_input.text()
        category = self.category_combobox.currentText()
        price = self.price_input.text()
        stock = self.stock_input.text()
        description = self.description_input.text()
        self.db_manager.update_furniture(self.furniture_id, name, category, price, stock, description)
        self.close()

    def get_furniture_by_id(self, furniture_id):
        sql = "SELECT * FROM Furniture WHERE furniture_id = %s"
        self.cursor.execute(sql, (furniture_id,))
        return self.cursor.fetchone()

class CustomersTab(QWidget):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.layout = QVBoxLayout(self)

        # Создаем виджеты
        self.first_name_label = QLabel("Имя:", self)
        self.first_name_input = QLineEdit(self)
        self.last_name_label = QLabel("Фамилия:", self)
        self.last_name_input = QLineEdit(self)
        self.phone_label = QLabel("Телефон:", self)
        self.phone_input = QLineEdit(self)
        self.email_label = QLabel("Email:", self)
        self.email_input = QLineEdit(self)
        self.add_customer_button = QPushButton("Добавить клиента", self)
        self.add_customer_button.clicked.connect(self.add_customer)

        # Таблица клиентов
        self.customers_table = QTableWidget(self)
        self.customers_table.setColumnCount(5)
        self.customers_table.setHorizontalHeaderLabels(["ID", "Имя", "Фамилия", "Телефон", "Email"])
        self.update_customers_table()

        # Кнопки для управления клиентами
        self.edit_customer_button = QPushButton("Редактировать клиента", self)
        self.edit_customer_button.clicked.connect(self.show_edit_customer_dialog)
        self.delete_customer_button = QPushButton("Удалить клиента", self)
        self.delete_customer_button.clicked.connect(self.delete_customer)

        # Создаем макеты
        input_layout = QGridLayout()
        input_layout.addWidget(self.first_name_label, 0, 0)
        input_layout.addWidget(self.first_name_input, 0, 1)
        input_layout.addWidget(self.last_name_label, 1, 0)
        input_layout.addWidget(self.last_name_input, 1, 1)
        input_layout.addWidget(self.phone_label, 2, 0)
        input_layout.addWidget(self.phone_input, 2, 1)
        input_layout.addWidget(self.email_label, 3, 0)
        input_layout.addWidget(self.email_input, 3, 1)
        input_layout.addWidget(self.add_customer_button, 4, 1)
        self.layout.addLayout(input_layout)

        self.layout.addWidget(self.customers_table)
        self.layout.addWidget(self.edit_customer_button)
        self.layout.addWidget(self.delete_customer_button)

        self.setLayout(self.layout)

    def add_customer(self):
        first_name = self.first_name_input.text()
        last_name = self.last_name_input.text()
        phone = self.phone_input.text()
        email = self.email_input.text()
        self.db_manager.add_customer(first_name, last_name, phone, email)
        self.update_customers_table()
        self.first_name_input.clear()
        self.last_name_input.clear()
        self.phone_input.clear()
        self.email_input.clear()

    def update_customers_table(self):
        self.customers_table.setRowCount(0)
        customers = self.db_manager.get_customers()
        for row_number, customer in enumerate(customers):
            self.customers_table.insertRow(row_number)
            self.customers_table.setItem(row_number, 0, QTableWidgetItem(str(customer[0])))
            self.customers_table.setItem(row_number, 1, QTableWidgetItem(customer[1]))
            self.customers_table.setItem(row_number, 2, QTableWidgetItem(customer[2]))
            self.customers_table.setItem(row_number, 3, QTableWidgetItem(customer[3]))
            self.customers_table.setItem(row_number, 4, QTableWidgetItem(customer[4]))

    def show_edit_customer_dialog(self):
        selected_row = self.customers_table.currentRow()
        if selected_row >= 0:
            customer_id = int(self.customers_table.item(selected_row, 0).text())
            dialog = EditCustomerDialog(self.db_manager, customer_id)
            if dialog.exec_():
                self.update_customers_table()

    def delete_customer(self):
        selected_row = self.customers_table.currentRow()
        if selected_row >= 0:
            customer_id = int(self.customers_table.item(selected_row, 0).text())
            self.db_manager.delete_customer(customer_id)
            self.update_customers_table()
        else:
            QMessageBox.warning(self, "Ошибка", "Выберите клиента для удаления.")

class EditCustomerDialog(QDialog):
    def __init__(self, db_manager, customer_id=None, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.customer_id = customer_id
        self.setWindowTitle("Редактировать клиента")
        self.layout = QGridLayout(self)

        self.first_name_input = QLineEdit(self)
        self.last_name_input = QLineEdit(self)
        self.phone_input = QLineEdit(self)
        self.email_input = QLineEdit(self)
        self.save_button = QPushButton("Сохранить", self)
        self.save_button.clicked.connect(self.save_changes)

        if customer_id is not None:
            customer_data = self.db_manager.get_customer_by_id(customer_id)
            if customer_data:
                self.first_name_input.setText(customer_data[1])
                self.last_name_input.setText(customer_data[2])
                self.phone_input.setText(customer_data[3])
                self.email_input.setText(customer_data[4])

        # Создаем макеты
        self.layout.addWidget(QLabel("Имя:", self), 0, 0)
        self.layout.addWidget(self.first_name_input, 0, 1)
        self.layout.addWidget(QLabel("Фамилия:", self), 1, 0)
        self.layout.addWidget(self.last_name_input, 1, 1)
        self.layout.addWidget(QLabel("Телефон:", self), 2, 0)
        self.layout.addWidget(self.phone_input, 2, 1)
        self.layout.addWidget(QLabel("Email:", self), 3, 0)
        self.layout.addWidget(self.email_input, 3, 1)
        self.layout.addWidget(self.save_button, 4, 1)

        self.setLayout(self.layout)

    def save_changes(self):
        first_name = self.first_name_input.text()
        last_name = self.last_name_input.text()
        phone = self.phone_input.text()
        email = self.email_input.text()
        self.db_manager.update_customer(self.customer_id, first_name, last_name, phone, email)
        self.close()

    def get_customer_by_id(self, customer_id):
        sql = "SELECT * FROM Customers WHERE customer_id = %s"
        self.cursor.execute(sql, (customer_id,))
        return self.cursor.fetchone()

class OrdersTab(QWidget):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.layout = QVBoxLayout(self)

        # Создаем виджеты
        self.customer_id_label = QLabel("ID Клиента:", self)
        self.customer_id_input = QLineEdit(self)
        self.total_amount_label = QLabel("Общая сумма:", self)
        self.total_amount_input = QLineEdit(self)
        self.status_label = QLabel("Статус:", self)
        self.status_combobox = QComboBox(self)
        self.status_combobox.addItems(["В обработке", "Отправлен", "Завершен"])
        self.add_order_button = QPushButton("Добавить заказ", self)
        self.add_order_button.clicked.connect(self.add_order)

        # Таблица заказов
        self.orders_table = QTableWidget(self)
        self.orders_table.setColumnCount(5)
        self.orders_table.setHorizontalHeaderLabels(["ID", "ID Клиента", "Дата заказа", "Общая сумма", "Статус"])
        self.update_orders_table()

        # Кнопки для управления заказами
        self.edit_order_button = QPushButton("Редактировать заказ", self)
        self.edit_order_button.clicked.connect(self.show_edit_order_dialog)
        self.delete_order_button = QPushButton("Удалить заказ", self)
        self.delete_order_button.clicked.connect(self.delete_order)

        # Создаем макеты
        input_layout = QGridLayout()
        input_layout.addWidget(self.customer_id_label, 0, 0)
        input_layout.addWidget(self.customer_id_input, 0, 1)
        input_layout.addWidget(self.total_amount_label, 1, 0)
        input_layout.addWidget(self.total_amount_input, 1, 1)
        input_layout.addWidget(self.status_label, 2, 0)
        input_layout.addWidget(self.status_combobox, 2, 1)
        input_layout.addWidget(self.add_order_button, 3, 1)
        self.layout.addLayout(input_layout)

        self.layout.addWidget(self.orders_table)
        self.layout.addWidget(self.edit_order_button)
        self.layout.addWidget(self.delete_order_button)

        self.setLayout(self.layout)

    def add_order(self):
        customer_id = self.customer_id_input.text()
        total_amount = self.total_amount_input.text()
        if customer_id.isdigit() and total_amount.replace('.', '', 1).isdigit():
            order_id = self.db_manager.add_order(int(customer_id), float(total_amount))
            self.update_orders_table()
            self.customer_id_input.clear()
            self.total_amount_input.clear()
            self.status_combobox.setCurrentIndex(0)
            self.show_add_order_details_dialog(order_id)
        else:
            QMessageBox.warning(self, "Ошибка", "Некорректные данные в полях ID клиента или общей суммы.")

    def update_orders_table(self):
        self.orders_table.setRowCount(0)
        orders = self.db_manager.get_orders()
        for row_number, order in enumerate(orders):
            self.orders_table.insertRow(row_number)
            self.orders_table.setItem(row_number, 0, QTableWidgetItem(str(order[0])))
            self.orders_table.setItem(row_number, 1, QTableWidgetItem(str(order[1])))
            self.orders_table.setItem(row_number, 2, QTableWidgetItem(str(order[2])))
            self.orders_table.setItem(row_number, 3, QTableWidgetItem(str(order[3])))
            self.orders_table.setItem(row_number, 4, QTableWidgetItem(order[4]))

    def show_edit_order_dialog(self):
        selected_row = self.orders_table.currentRow()
        if selected_row >= 0:
            order_id = int(self.orders_table.item(selected_row, 0).text())
            dialog = EditOrderDialog(self.db_manager, order_id)
            if dialog.exec_():
                self.update_orders_table()

    def delete_order(self):
        selected_row = self.orders_table.currentRow()
        if selected_row >= 0:
            order_id = int(self.orders_table.item(selected_row, 0).text())
            self.db_manager.delete_order(order_id)
            self.update_orders_table()
        else:
            QMessageBox.warning(self, "Ошибка", "Выберите заказ для удаления.")

    def show_add_order_details_dialog(self, order_id):
        dialog = AddOrderDetailsDialog(self.db_manager, order_id)
        dialog.exec_()

class EditOrderDialog(QDialog):
    def __init__(self, db_manager, order_id=None, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.order_id = order_id
        self.setWindowTitle("Редактировать заказ")
        self.layout = QGridLayout(self)

        self.customer_id_input = QLineEdit(self)
        self.total_amount_input = QLineEdit(self)
        self.status_combobox = QComboBox(self)
        self.status_combobox.addItems(["В обработке","Отправлен", "Завершен"])
        self.save_button = QPushButton("Сохранить", self)
        self.save_button.clicked.connect(self.save_changes)

        if order_id is not None:
            order_data = self.db_manager.get_order_by_id(order_id)
            if order_data:
                self.customer_id_input.setText(str(order_data[1]))
                self.total_amount_input.setText(str(order_data[3]))
                self.status_combobox.setCurrentText(order_data[4])

        # Создаем макеты
        self.layout.addWidget(QLabel("ID Клиента:", self), 0, 0)
        self.layout.addWidget(self.customer_id_input, 0, 1)
        self.layout.addWidget(QLabel("Общая сумма:", self), 1, 0)
        self.layout.addWidget(self.total_amount_input, 1, 1)
        self.layout.addWidget(QLabel("Статус:", self), 2, 0)
        self.layout.addWidget(self.status_combobox, 2, 1)
        self.layout.addWidget(self.save_button, 3, 1)

        self.setLayout(self.layout)

    def save_changes(self):
        customer_id = self.customer_id_input.text()
        total_amount = self.total_amount_input.text()
        status = self.status_combobox.currentText()
        if customer_id.isdigit() and total_amount.replace('.', '', 1).isdigit():
            self.db_manager.update_order(self.order_id, int(customer_id), float(total_amount), status)
            self.close()
        else:
            QMessageBox.warning(self, "Ошибка", "Некорректные данные в полях ID клиента или общей суммы.")

    def get_order_by_id(self, order_id):
        sql = "SELECT * FROM Orders WHERE order_id = %s"
        self.cursor.execute(sql, (order_id,))
        return self.cursor.fetchone()

class AddOrderDetailsDialog(QDialog):
    def __init__(self, db_manager, order_id, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.order_id = order_id
        self.setWindowTitle("Добавить детали заказа")
        self.layout = QGridLayout(self)

        self.furniture_id_label = QLabel("ID Мебели:", self)
        self.furniture_id_input = QLineEdit(self)
        self.quantity_label = QLabel("Количество:", self)
        self.quantity_input = QLineEdit(self)
        self.add_details_button = QPushButton("Добавить детали", self)
        self.add_details_button.clicked.connect(self.add_details)

        # Создаем макеты
        self.layout.addWidget(self.furniture_id_label, 0, 0)
        self.layout.addWidget(self.furniture_id_input, 0, 1)
        self.layout.addWidget(self.quantity_label, 1, 0)
        self.layout.addWidget(self.quantity_input, 1, 1)
        self.layout.addWidget(self.add_details_button, 2, 1)

        self.setLayout(self.layout)

    def add_details(self):
        furniture_id = self.furniture_id_input.text()
        quantity = self.quantity_input.text()
        if furniture_id.isdigit() and quantity.isdigit():
            self.db_manager.add_order_details(self.order_id, int(furniture_id), int(quantity))
            self.furniture_id_input.clear()
            self.quantity_input.clear()
            self.close()
        else:
            QMessageBox.warning(self, "Ошибка", "Некорректные данные в полях ID мебели или количества.")

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Система учета и анализа данных о продаже мебели")
        self.layout = QHBoxLayout(self)

        # Подключаемся к базе данных (перемещаем сюда)
        self.connect_to_database()

        # Создаем вкладки
        self.furniture_tab = FurnitureTab(self.db_manager)
        self.customers_tab = CustomersTab(self.db_manager)
        self.orders_tab = OrdersTab(self.db_manager)


        # Создаем виджеты для переключения между вкладками
        self.tab_widget = QTabWidget(self)
        self.tab_widget.addTab(self.furniture_tab, "Мебель")
        self.tab_widget.addTab(self.customers_tab, "Клиенты")
        self.tab_widget.addTab(self.orders_tab, "Заказы")

    # Добавляем вкладки в макет
        self.layout.addWidget(self.tab_widget)
        self.setLayout(self.layout)

    def connect_to_database(self):
        self.db_manager = DatabaseManager(host='localhost', user='admin', password='admin_228', database='suprun_furniture', charset='utf8mb4', collation='utf8mb4_unicode_ci')

if __name__ == "__main__":
  app = QApplication(sys.argv)
  window = MainWindow()

  # Подключаемся к базе данных
  window.connect_to_database()

  window.show()
  sys.exit(app.exec_())
